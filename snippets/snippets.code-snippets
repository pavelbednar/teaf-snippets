{
	"TEAF: Interface with instanceof": {
		"prefix": "interfaceInstanceOf",
		"body": [
			"${99:/**\n * $100\n */}",
			"export interface I${1:Name}${2: extends $3} {",
			"\t$0",
			"}\n",
			"export class $1 {",
			"\t${5:private static _properties: (keyof $1)[] = [$6];}",
			"\t${7:private static _methods: (keyof $1)[] = [$8];}",
			"\t${9:private static _interfaces = [$10];}",
			"\n",
			"\tpublic static [Symbol.hasInstance](instance: any): boolean {",
			"\t\treturn instance != null${11: && !this._properties.some((value) => !Reflect.has(instance, value))}${12: && !this._methods.some(value => typeof instance[value] !== \"function\")}${13: && this._interfaces.every((_interface) => instance instanceof _interface)};",
			"\t}",
			"}"
		],
		"description": "Creates a new Interface snippet with support of instanceof comparison"
	},
	"TEAF: Redux action interface": {
		"prefix": "actionInterface",
		"body": [
			"${99:/**\n * $100\n */}",
			"export interface I${1:Name}Action${2: extends ${3:Action}} {",
			"${4:\treadonly payload: {\n\t\t$5\n\t\\};}",
			"}",
			"export class I$1Action {",
			"\tpublic static [Symbol.hasInstance](instance: any): boolean {",
			"\t\treturn instance != null && instance.type === ${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm};",
			"\t}",
			"}"
		],
		"description": "Creates an interface for redux action"
	},
	"TEAF: Action Creator": {
		"prefix": "actionCreator",
		"body": [
			"${99:/**\n * $100\n */}",
			"export const create${1:Some}Action = (",
			"\t$2",
			"): I$1Action => ({",
			"\ttype: ${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm},",
			"${3:\tpayload: {\n\t\t$4\n\t\\},}",
			"${5:\tmeta: {\n\t\t$6\n\t\\},}",
			"});",
		],
		"description": "Creates a redux action creator."
	},
	"TEAF: Export all from package": {
		"prefix": "expall",
		"body": "export * from \"./${1:${TM_DIRECTORY/^.+[\\/\\\\]+(.*)$/$1/}}\";\n${0}",
		"description": "Export all from package "
	},
	"TEAF: Import Sinon package": {
		"prefix": "ims",
		"body": "import * as sinon from \"sinon\";${0}",
		"description": "Import sinon package"
	},
	"TEAF: Import {what} from {something}": {
		"prefix": "imf",
		"body": "import { ${2:what} } from \"${1:package}\";${0}",
		"description": "Import { whatever} from \" some package\""
	},
	"TEAF: Import Redux stuff for connected components": {
		"prefix": "imrc",
		"body": [
			"import { IAppState, OmitContainerProps } from \"@multiweb/types/react\";",
			"import { MapDispatchToProps, MapStateToProps, connect } from \"react-redux\";",
			"import { ${1:${TM_FILENAME_BASE}}ComponentProps, ${1:${TM_FILENAME_BASE}}Component } from \"../${1:${TM_FILENAME_BASE}}Component\";",
		],
		"description": "Import types for connected components.",
	},
	"TEAF: React Functional Component": {
		"prefix": "rfc",
		"body": [
			"import React, {FunctionComponent} from \"react\";",
			
			"${1:import { bemClassNames } from \"@teaf/utils\";\nconst classNames = bemClassNames(\"${2/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/downcase}${2:/downcase}${2:+-}/gm}\");}",
			"",
			"export type ${2:${TM_FILENAME_BASE}}Props = {",
			"\t${3:children?: React.ReactNode;}",
			"}",
			"",
			"${99:/**\n * $100\n */}",
			"export const $2: FunctionComponent<$2Props> = (${4:{ ${5:children} \\}}) => {",
			"\treturn (",
			"\t\t<div${6: className={classNames()\\}}>",
			"\t\t\t${7:{children\\}}",
			"\t\t</div>",
			"\t)",
			"};\n",
		],
		"description": "React Functional Component"
	},
	"TEAF useState with type and default value": {
		"prefix": "useState",
		"body": "const [${1:prop}, set${1/(.*)/${1:/capitalize}/}] = useState<${3}>(${4});\n$5",
		"description": "useState with type and default value"
	},
	"TEAF: useEffect": {
		"prefix": "useEffect",
		"body": [
			"${99:/**\n * $100\n */}",
			"useEffect(() => {",
			"\t$0",
			"${2:\treturn () => {\n\t\t$3\n\t}}",
			"},[$1]);",
		],
		"description": "Creates useEffect hook with its body and cleanup function."
	},
	"TEAF: omitContainerProps": {
		"prefix": "omitContainerProps",
		"body": [
			"export type ${1:${TM_FILENAME_BASE}}Props = OmitContainerProps<${2:{\n\t${3:readonly someOwnProp: string;}\n\\} & }${1:${TM_FILENAME_BASE}}ComponentProps${4:, StateProps}${5:, DispatchProps}>;",
		],
		"description": "Creates props for a component using OmitContainerProps type."
	},
	"TEAF: state props": {
		"prefix": "stateProps",
		"body": [
			"type StateProps = Pick<${1:${TM_FILENAME_BASE}}ComponentProps, ${2:\"someProp\"}>;\n",
		],
		"description": "Creates state props"
	},
	"TEAF: dispatch props": {
		"prefix": "dispatchProps",
		"body": [
			"type DispatchProps = Pick<${1:${TM_FILENAME_BASE}}ComponentProps, ${2:\"someMethod\"}>;\n",
		],
		"description": "Creates dispatch props"
	},
	"TEAF: connect": {
		"prefix": "connect",
		"body": [
			"export const ${1:${TM_FILENAME_BASE}} = connect(${2|mapStateToProps,createMapStateToProps|}${3:, mapDispatchToProps}${4:, mergeProps})(${1:${TM_FILENAME_BASE}}Component);",
		],
		"description": "Creates dispatch props"
	},
	"TEAF: mapStateToProps": {
		"prefix": "mapStateToProps",
		"body": [
			"${1:type StateProps = Pick<${2:${TM_FILENAME_BASE}}ComponentProps, ${3:\"someProp\"}>;\n}",
			"const mapStateToProps: MapStateToProps<StateProps, ${2:${TM_FILENAME_BASE}}Props, IAppState> = (state${4:, { ${5:someOwnProp} \\}}) => ({",
				"\t${6:someProp: getSomeProp(state),}$0",
				"});",
		],
		"description": "Creates state props and mapToState function."
	},
	"TEAF: createMapStateToProps": {
		"prefix": "createMapStateToProps",
		"body": [
			"${1:type StateProps = Pick<${2:${TM_FILENAME_BASE}}ComponentProps, ${3:\"someProp\"}>;\n}",
			"const createMapStateToProps: (state: IAppState, props: ${2:${TM_FILENAME_BASE}}Props) => MapStateToProps<StateProps, ${2:${TM_FILENAME_BASE}}Props, IAppState> = () => {",
			"\t${4:const getSomethingSelector = createSomethingSelector();}",
			"\treturn (state${5: , { ${6:someOwnProp} \\}}) => ({",
			"\t\t${7:someProp: getSomethingSelector(state, { someOwnProp \\}),}$0",
			"\t});",
			"};",
		],
		"description": "Creates function `createMapStateToProps` returning `MapStateToProps`.",
	},
	"TEAF: mapDispatchToProps": {
		"prefix": "mapDispatchToProps",
		"body": [
			"${1:type DispatchProps = Pick<${2:${TM_FILENAME_BASE}}ComponentProps, ${3:\"someMethod\"}>;\n}",
			"const mapDispatchToProps: MapDispatchToProps<DispatchProps, ${2:${TM_FILENAME_BASE}}Props> = (dispatch${4:, { ${5:someOwnProp} \\}}) => ({",
				"\t${6:${7:someMethod}: () => dispatch(${8:createSomeAction()}),}$0",
				"});",
		],
		"description": "Creates state props and mapToState function."
	},
	"TEAF: Redux Action Name Contant ": {
		"prefix": "actionConstant",
		"body": "export const ${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm} = createActionType(\"${1/([A-Z][a-z]+$)|((^|[A-Z])[a-z]+)/${1:/upcase}${2:/upcase}${2:+_}/gm}\");",
		"description": "Creates exportable const for redux action name"
	},
	"TEAF: Object destructing ": {
		"prefix": "destruct",
		"body": "const { ${2:property}${3:, ...${4:rest}} } = ${1:objectName};$0",
		"description": "Creates exportable const for redux action name"
	},
	"TEAF: region": {
		"prefix": "region",
		"body": [
			"//#region ${1: Name}",
			"$0",
			"//#endregion $1",
		],
		"description": "Creates typescript region"
	},
	"TEAF: ts-ignore": {
		"prefix": "tsig",
		"body": "//@ts-ignore",
		"description": "Creates typescript //@ts-ignore directive"
	},
	"TEAF: createSelector": {
		"prefix": "createSel",
		"body": [
			"${99:/**\n * $100\n */}",
			"export const createGet${1:SomeSelector} = () =>",
			"\tcreateSelector<IAppState, string, ReturnType<typeof $6>, ReturnType<typeof $9>, ${2:boolean}>(",
        	"\t\t(state${4:, ${5: attribute}}) => ${6:selector1}(state$4)",
        	"\t\t(state${7:, ${8: attribute}}) => ${9:selector2}(state$7)",
        	"\t\t(${10:value1}, ${11:value2}) => {",
        	"\t\t\t${12: return ${13}};",
        	"\t\t}",
			"\t);"
		],
		"description": "Creates redux selector with reselect createSelector`.",
	},
	"TEAF: selector": {
		"prefix": "selector",
		"body": [
			"${99:/**\n * $100\n */}",
			"export const get${1:SomeSelector}: Selector<IAppState, ${2:boolean}${3:, ${4:string}}> = (state${5:, ${6:argument}}) => state.${10};"
		],
		"description": "Creates redux selector with reselect createSelector`.",
	},
	"TEAF: console.log": {
		"prefix": "cl",
		"body": [
			"// eslint-disable-next-line no-console",
			"console.log(${0});"
		],
		"description": "Creates redux selector with reselect createSelector`.",
	},
}